---
title: "Introducción a R y RStudio"
subtitle: "XII Congreso Colombiano de Botánica"
author:
  - name: "Álex Espinosa Correa"
    affiliation: "Universidad de Antioquia"
  - name: "Bladimir Vera Marín"
    affiliation: "Instituto Tecnológico Metropolitano"
# date: 2024-11-02

format: 
  revealjs:
    theme:
      - simple
      - ../../custom.scss
    width: 1920
    height: 1080
    embed-resources: true
    slide-number: true
    preview-links: true
    controls: true
    touch: false
    # chalkboard: true
    logo: "https://github.com/geobota/geobota.github.io/blob/main/images/xii-ccb/xii-ccb-logo.png?raw=true"
    footer: "[Etnobotánica Cuantitativa en R](https://geobota.github.io/xii-ccb-etnobotanica/)"
bibliography: references.bib
csl: apa.csl
---

```{r}
#| label: setup
#| output: false

if (!require("here")) install.packages("here")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("palmerpenguins")) install.packages("palmerpenguins")
if (!require("ggthemes")) install.packages("ggthemes")
if (!require("flextable")) install.packages("flextable")
if (!require("sysfonts")) install.packages("sysfonts")
if (!require("showtext")) install.packages("showtext")

sysfonts::font_add_google(
  name = "Atkinson Hyperlegible",
  family = "atkinson"
)

showtext::showtext_auto()

ggplot2::theme_set(
  ggplot2::theme_classic(
    # base_size = 18,
    base_family = "atkinson"
  )
)
```

## Proposotio 1

```{r}
#| label: figura-proposito
#| echo: false
#| warning: false
#| fig-alt: |
#|   Un diagrama de dispersión de la masa corporal frente a la longitud de la aleta de los pingüinos, con una línea de mejor ajuste de la relación entre estas dos variables superpuesta. El gráfico muestra una relación positiva, bastante lineal y relativamente fuerte entre estas dos variables. Las especies (Adelia, Barbijo y Papúa) se representan con diferentes colores y la relación entre la masa corporal y la longitud de la aleta es aproximadamente la misma para estas tres especies, y los pingüinos Papúa son #| más grandes que los pingüinos de las otras dos especies.

palmerpenguins::penguins |> 
  ggplot2::ggplot() + 
  ggplot2::aes(
    x = flipper_length_mm,
    y = body_mass_g
  ) + 
  ggplot2::geom_point(
    ggplot2::aes(
      color = species,
      shape = species
    )
  ) + 
  ggplot2::geom_smooth(
    method = "lm"
  ) + 
  ggplot2::labs(
    title = "Masa corporal y longitud de la aleta",
    subtitle = "Dimensiones para los Pingüinos Adelie (Adelia), Chinstrap (Barbijo) y Gentoo (Papúa)",
    x = "Longitud de la aleta (mm)",
    y = "Masa corporal (g)",
    color = "Especies",
    shape = "Especies"
  ) + 
  ggthemes::scale_color_colorblind()
```

## Proposito 2

```{r}
#| label: tabla-proposito
#| echo: false
#| message: false
#| warning: false

palmerpenguins::penguins |> 
  dplyr::count(
    species,
    island,
    sex
  ) |> 
  dplyr::group_by(
    species,
    island
  ) |> 
  dplyr::mutate(
    percentage = n / sum(n) * 100
  ) |> 
  dplyr::ungroup() |> 
  flextable::flextable() |> 
  flextable::merge_v(
    j = c("species", "island")
  ) |> 
  flextable::mk_par(
    j = "species",
    value = flextable::as_paragraph(flextable::as_i(species)),
  ) |>
  flextable::colformat_char(
    j = "sex",
    na_str = "NA",
  ) |> 
  flextable::mk_par(
    i = ~ sex == "female",
    value = flextable::as_paragraph("Hembra"),
    j = "sex",
  ) |> 
  flextable::mk_par(
    i = ~ sex == "male",
    value = flextable::as_paragraph("Macho"),
    j = "sex",
  ) |> 
  flextable::set_header_labels(
    species = "Especie",
    island = "Isla",
    sex = "Sexo",
    percentage = "Porcentaje (%)"
  ) |> 
  flextable::theme_apa() |> 
  flextable::autofit() |> 
  flextable::font(
    fontname = "Atkinson Hyperlegible"
  ) |> 
  flextable::fontsize(size = 18, part = "all") |> 
  flextable::set_table_properties(width = 1, layout = "autofit")
```

## Qué es R

::: columns
::: {.column .fragment fragment-index="1" width="40%"}
> R es un sistema para computación estadística y gráficos. Consiste en un lenguaje más un entorno de ejecución con gráficos, un depurador, acceso a ciertas funciones del sistema y la capacidad de ejecutar programas almacenados en archivos de script. @rmanual

![](images/logo_r.png){fig-align="center" width="400"}
:::

::: {.column .incremental width="60%"}
-   **Lenguaje**: R es un lenguaje de programación, con sintaxis y funciones propias.
-   **Entorno de ejecución**: R proporciona un entorno en el que se pueden ejecutar programas escritos en R.
-   **Gráficos**: R incluye capacidades avanzadas para la creación de gráficos.
-   **Depurador**: R incluye herramientas para encontrar y corregir errores en sus scripts.
-   **Acceso a funciones del sistema**: R puede interactuar con el sistema operativo.
-   **Programas en scripts**: se pueden escribir programas y guardarlos en archivos de texto con extensión .R (scripts).
:::
:::

## Historia

![Algunos hitos importantes en la historia de R. Modificado de @giorgi2022.](images/timeline_r.png){fig-align="center"}

## Nuestros guías

::: columns
::: {.column .fragment width="50%"}
![R for data science de @wickham2023a. Disponible en [r4ds.hadley.nz/](https://r4ds.hadley.nz/)](images/r4ds.jpg){#r4ds fig-align="center" width="381"}
:::

::: {.column .fragment width="50%"}
![Quizá la persona más importante en el ecosistema R.](images/meme_hadley-wickham.jpg){#meme_wickham fig-align="center"}
:::
:::

## Flujo de trabajo en ciencias de datos

![En este modelo, todo comienza con la importación y limpieza de los datos. Seguido de un ciclo iterativo de transformación, visualización y modelado. Finalmente, termina con comunicar. Tomado de @wickham2023a.](images/data-science.png){data-science-1 fig-align="center" width="600"}

## Datos ordenados

Hay tres reglas interrelacionadas que hacen que un conjunto de datos esté ordenado:

1.  Cada variable es una columna; cada columna es una variable.
2.  Cada observación es una fila; cada fila es una observación.
3.  Cada valor es una celda; cada celda es un único valor.

![Las siguientes tres reglas hacen que un conjunto de datos esté ordenado: las variables son columnas, las observaciones son filas y los valores son celdas. Tomado de @wickham2023a.](images/tidy-1.svg){#tidydata fig-align="center"}

::: footer
Artículo original @wickham2014
:::

## Programar es como llevar un buen matrimonio

::: fragment
![¡Ya cómete la maldita naranja!](images/meme_comete-naranja.jpeg){fig-align="center"}
:::

## Recordemos donde estamos

![[Apariencia por defecto de RStudio.](https://docs.posit.co/ide/user/ide/get-started/)](images/rstudio_ide.jpeg){fig-align="center"}

## Ejecutar código

Ejecutar código en la consola de R es muy sencillo. Sólo tienes que escribirlo al lado de símbolo de mayor que `>` y presionar `enter` para ejecutarlo. En la consola de R, el signo `>` se conoce como **prompt**, mientras que el código que escribes se llama un comando.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> 4 + 2
[1] 6
> 4 * 2
[1] 8
> 4 / 2
[1] 2
> 4**2
[1] 16
```

El número que aparece entre corchetes `[]` informa que esta línea comienza con ese valor del resultado. Algunos comandos devuelven más de un valor y sus resultados pueden ocupar múltiples líneas. Estos números se pueden ignorara en la mayoría de los casos.

Los símbolos `+`, suma; `-`, resta; `*`, multiplicación; `/`, división; `**` o `^`, exponencial; son algunos de operadores matemáticos que tiene R.

## Otros operadores

El operador dos puntos `:` devuelve todos los enteros entre dos enteros. Es una forma fácil de crear una secuencia de números.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> 4:2
[1] 4 3 2
```

Los operadores de comparación son: `==` igual `!=` no igual, `>` mayor que, `<` menor que, `>=` mayor o igual que, `<=`menor o igual que.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> 4 == 2
[1] FALSE
> 4 != 2
[1] TRUE
```

Los operadores lógicos son: `|` OR, `&` AND, `!` NOT.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> TRUE | FALSE
[1] TRUE
> TRUE & FALSE
[1] FALSE
> TRUE & !FALSE
[1] TRUE
```

## Crear objetos

Las entidades que R crea y manipula se denominan objetos. Un objeto es un nombre que puedes usar para llamar a los datos almacenados[^1]. Los objetos se crean utilizando el operador de asignación `<-`. Cuando se crea un objeto este aparecerá en el *environment pane* de RStudio.

[^1]: En R los nombres se pueden nombrar de cualquier manera, con dos excepciones. Primero, un nombre no puede comenzar con un número. Segundo, un nombre no puede usar algunos símbolos especiales, como \^, !, \$, \@, +, -, /, o \*.

``` {.r filename="console" code-line-numbers="false" style="font-size: 150%"}
> x <- 4 * 2
```

El valor de `x` no se imprime en consola, sólo se almacena. Si se quiere ver el valor, hay que llamarlo.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> x
[1] 8
```

## Crear objetos

Se pueden **c**ombinar múltiples elementos en un vector usando `c()`

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
# crear vector de números primos
numeros_primos <- c(2, 3, 5, 7, 11, 13)
```

Así mismo, se pueden realizar operación con los vectores.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
# Multiplicar vector de números primos por dos.
> numeros_primos * 2
[1]  4  6 10 14 22 26
```

R ignora cualquier texto después de `#`. Esto permite escribir comentarios, texto que es ignorado por R pero leído por otras personas. Usa comentarios para explicar el porqué de tu código, no el cómo ni el qué.

## Funciones

> Las funciones son bloques de código que realizan una tarea específica y que pueden ser invocadas (llamadas) desde cualquier parte. 

En R las funciones se han de llamar así:

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
nombre_funcion(argumento_1 = valor_1, argumento_2 = valor_2, ...)
```

Probemos la función `seq()` que crea secuencias regulares de números.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
seq(from = 1, to = 10)
 [1]  1  2  3  4  5  6  7  8  9 10
```

A menudo omitimos los nombres de los primeros varios argumentos en las llamadas a funciones, por lo que podemos reescribir esto de la siguiente manera:

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
> seq(1, 10)
 [1]  1  2  3  4  5  6  7  8  9 10
```

## Paquetes

> Los paquetes son las unidades fundamentales del código reproducible en R. Incluyen funciones reutilizables de R, la documentación que describe cómo usarlas y datos de muestra. @wickham2023

### The Comprehensive R Archive Network (CRAN)

> CRAN es una red de servidores FTP y web alrededor del mundo que almacenan versiones idénticas y actualizadas del código y la documentación de R.

En R (casi) todos los paquetes se pueden instalar utilizando la función `install.packages`.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
install.packages("ethnobotanyR")
```

Para poder usar las funciones se han de llamar usando la función `library()`.

``` {.r filename="Console" code-line-numbers="false" style="font-size: 150%"}
library(ethnobotanyR)
```

## Pipe `|>`

## Scripts

Los scripts son archivos que contienen código en lenguaje R, organizado de manera secuencial para realizar operaciones específicas, análisis de datos, o cualquier tarea que se pueda automatizar.

``` {.r filename="script.r" code-line-numbers="true" style="font-size: 150%"}
# Instalar paquetes
install.packages(
  c(
    "tidyverse",
    "palmerpenguins"
    "ggthemes"
  )
)

# Cargar paquetes
library(tidyverse)
library(palmerpenguins)
library(ggthemes)

# Crea un vector con el gráfico hecho en `ggplot2`
fig_pinguinos <- 
  palmerpenguins::penguins |> 
  ggplot2::ggplot(
    ggplot2::aes(
      x = flipper_length_mm,
      y = body_mass_g
    )
  ) + 
  ggplot2::geom_point()

# Muestras el gráfico
fig_pinguinos
```

## Que alguien llame a alguien

# `r fontawesome::fa("laptop-code", "white")` Actividad {background-color="#0072B2" transition="slide-in"}

-   Ejemplo de actividad
-   Ejemplo de actividad
-   Ejemplo de actividad

<br>
<br>

#  {background-color="#009E73" transition="slide-in"}

[¡Bienvenidos al Tidyverse!]{.r-fit-text}

## Tidyverse

El tidyverse es una colección estructurada de paquetes de R diseñados para la ciencia de datos. Todos los paquetes comparten una filosofía de diseño subyacente, una gramática y estructuras de datos. @wickham2019.

``` {.r filename="console" code-line-numbers="false" style="font-size: 150%"}
install.packages("tidyverse")
```

Carguemos el `tidyverse` y observemos la salida.

``` {.r filename="console" code-line-numbers="false" style="font-size: 150%"}
> library(tidyverse)
── Attaching core tidyverse packages ─────────────────────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.0     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ───────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package to force all conflicts to become errors
```

## Tidyverse y la ciencia de datos

![El Tidyverse tiene multipes paquetes que nos ayudaran durante todo el proceso de analizar los datos. Tomado de @çetinkaya-rundel2023.](images/data-science_tidyverse.png){#fig-data-science-2 fig-align="center"}


## Referencias
